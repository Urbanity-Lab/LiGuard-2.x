# This configuration file can be used across entire LiGuard suite.

data: # dataset configurations
    path: D:\datasets\shahbaz\datasets\pedsafe_human_labeled # base path, path/points => point clouds, path/output => output labels
    lidar_subdir: 'lidar' # subdirectory containing point clouds
    camera_subdir: 'camera' # subdirectory containing images
    label_subdir: 'label' # subdirectory containing labels
    calib_subdir: 'calib' # subdirectory containing calibration files
    size: 10 # number of frames to annotate - set 0 to annotate full

    lidar:
        enabled: True # set True to read point clouds from disk
        pcd_type: '.bin' # can be .bin or .npy
    camera:
        enabled: False # set True to read images from disk
        img_type: '.png' # most image types are supported
    label:
        enabled: False # set True to read labels from disk
        lbl_type: 'kitti' # can be kitti, ips, lumpi
        extra_args: None # can be measurement csv path for lumpi

sensors: # lidar and camera configurations
    lidar:
        enabled: False # set True to stream point clouds from sensor
        hostname: '192.168.1.12' # sensor ip address or hostname
        manufacturer: 'Ouster' # sensor manufacturer
        model: 'OS1-64' # sensor model
        serial_number: '122204001078' # sensor serial number
    camera:
        enabled: False # set True to stream point clouds from sensor
        hostname: '192.168.1.21' # sensor ip address or hostname
        manufacturer: 'Flir' # sensor manufacturer
        model: 'BFS-PGE-16S2C-CS' # sensor model
        serial_number: '23422874' # sensor serial number
        camera_matrix: [2552.449042506032, 0.0, 766.5504021841039, 0.0, 2554.320087252825, 553.0299764355634, 0.0, 0.0, 1.0] # camera matrix (K)
        distortion_coeffs: [-0.368698, 0.042837, -0.002189, -0.000758, 0.000000] # distortion coefficients (D)
        T_lidar_camera: [[-0.00315, 0.00319, 0.99999, -0.17392], [-0.99985, -0.01715, -0.00309, 0.00474], [0.01714, -0.99985, 0.00324, -0.05174], [0.00000, 0.00000, 0.00000, 1.00000]] # 4x4 transformation matrix from camera to lidar

proc: # liguard processing configurations
    lidar:
        crop:
            priority: 2 # priority of process - lower is higher
            enabled: False # set True to crop point cloud
            min_xyz: [-40, -40, -4] # minimum x, y, z
            max_xyz: [+40, +40, +2] # maximum x, y, z
        project_image_pixel_colors:
            enabled: False # set True to paint point cloud with rgb
            priority: 3 # priority of process - lower is higher
        BGFilterDHistDPP: # Discrete Histogram of Distances-Per-Point
            enabled: False # set True to filter background using Discrete Histogram of Distances-Per-Point
            priority: 1 # priority of process - lower is higher
            number_of_frame_gather_iters: 6 # number of iterations to gather frames
            number_of_frames_in_each_gather_iter: 10 # number of frames gathered in each iteration
            number_of_skip_frames_after_each_iter: 100 # number of frames to skip after each iteration
            number_of_points_per_frame: 65536 # number of points in each point cloud
            lidar_range_in_unit_length: 100 # maximum range of lidar in lidar unit length
            bins_per_unit_length: 2 # number of bins per unit length
            background_density_threshold: 0.5 # threshold that tells if a bin is dense enough to be considered as background
        BGFilterSTDF: # Spatio-Temporal Density Filter
            enabled: False # set True to filter background using Simple Density Filter Filter
            priority: 1 # priority of process - lower is higher
            number_of_frame_gather_iters: 6 # number of iterations to gather frames
            number_of_frames_in_each_gather_iter: 10 # number of frames gathered in each iteration
            number_of_skip_frames_after_each_iter: 100 # number of frames to skip after each iteration
            number_of_points_per_frame: 65536 # number of points in each point cloud
            lidar_range_in_unit_length: 100 # maximum range of lidar in lidar unit length
            bins_per_unit_length: 2 # number of bins per unit length
            background_density_threshold: 0.5 # threshold that tells if a bin is dense enough to be considered as background
        Clusterer_TEPP_DBSCAN: # Theoretically Efficient and Practical Parallel DBSCAN point clustering algorithm
            enabled: False # set True to cluster point cloud using TEPP DBSCAN
            activate_on_key_set: 'current_point_cloud_numpy' # activates as soon as this key is available in data_dict, it can be set by any other process to activate this process
            priority: 3 # priority of process - lower is higher
            eps: 0.5 # maximum radius to search
            min_samples: 5 # minimum number of points to consider a cluster valid
    camera:
        project_point_cloud_points: # project point cloud points to camera image
            enabled: False # set True to project point cloud points to camera image
            priority: 1 # priority of process - lower is higher
    label:
        remove_out_of_bound_labels: # crop out of bound bboxes
            enabled: False # set True to crop labels
            priority: 1 # priority of process - lower is higher

        remove_empty_labels: # remove labels with no points
            enabled: False # set True to remove labels
            priority: 2 # priority of process - lower is higher
    post:
        create_per_object_pcdet_dataset: # create per object dataset in pcdet format
            enabled: False # set True to enable
            priority: 1 # priority of process - lower is higher

visualization: # visualization parameters
    enabled: True # set True to visualize
    lidar:
        space_color: [0, 0, 0] # color of non-point-cloud
        bound_color: [0, 0, 1] # point cloud range bound bbox color
        point_size: 1.0 # rendered point size
    camera:
        bbox_line_width: 2 # bbox line width
        
threads: # don't change unless debugging
    io_sleep: 0.01 # input/output threads sleep time in seconds
    proc_sleep: 0.01 # processing threads sleep time in seconds
    vis_sleep: 0.01 # visualization threads sleep time in seconds